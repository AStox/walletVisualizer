First:
✅ Add token prices
✅ Verify ethereum balances for every transaction
✅ Fix toggle styling
✅ Update visuals to cumulative area graph
✅ Optimize data requests
✅ Automatically get token prices each day
✅ Add the current datetime timestamp as the final transaction to get up-to-date info
✅ Improved tooltips. 
    ✅ Show what colors correspond to what tokens and balance values
    ✅ Show Total balance
    ✅ Show percent change (24 hrs, 1 week)
    ✅  Show token price
    ✅  Make token order in tooltip the same as in the graph
    ✅  Make it looks pretty
✅ Restructure return value to have all_tokens and total_balance
    ❌ (ConnectNulls={false} is not supported for stacked area graphs in recharts) replace places that use transaction[-1]["balances] to get a list of tokens used and
       remove token balances that are less than 1 cent, to unclutter the graph
    ✅ calculate total balance per date and percent changes per date
✅ Use classes for contract data
✅ Fix missing contract data (some uniswap pools seem to be missing)
✅ Automatically detect and utilize token decimals
✅ Automatically detect new tokens and grab or (prompt user to grab) contract address, abi, and price history
✅ Refactor api.py
▶️  Verify token balances for every transaction
▶️  Add celery and redis for asynchronous background task execution and progress bar on the front end
▶️  Fix bug with final transaction skipping a day until like 8pm. Seems like a timezones issue
▶️  Have better error reporting
    ▶️  Trickle errors to the front-end
▶️  Only update missing price info and missing transactions
▶️  Automatically decrease batch size if subgraph returns 413

Liquidity Pools:
✅ Determine rewards. Get percentage staked from contract, compare original amountIn with current pool amounts
▶️  Show values of staked tokens had you held them with a dashed line

 Future:
▶️  Mutliple wallets at once
▶️  zoomable/pannable chart
▶️  add/edit/delete transactions
▶️  Add a principle line to graph. Line that shows the amount of your money invested over time
▶️  Use websockets or something to send data to the client in packets instead of in one chunk
